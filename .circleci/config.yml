version: 2.0

workflows:
  version: 2
  commit:
    jobs:
      - build-armhf
      - build-arm64
      - push-manifest:
          requires:
            - build-armhf
            - build-arm64
      # - build-amd64
  nightly:
    jobs:
      - build-armhf
      - build-arm64
      - push-manifest:
          requires:
            - build-armhf
            - build-arm64
      # - build-amd64
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master

shared: &shared
  machine: true
  steps:
    - checkout

    - run:
        name: Install build dependencies.
        command: sudo apt update && sudo apt install curl jq

    - run:
        name: Add repo version to env.
        command: |
          echo 'export VERSION=$(curl -s https://api.github.com/repos/${GITHUB_REPO}/releases/latest | jq -r ".tag_name")' >> $BASH_ENV
          echo 'export IMAGE_ID="${REGISTRY}/${IMAGE}:${VERSION}-${TAG}"' >> $BASH_ENV
          source $BASH_ENV

    - run:
        name: Update Go version.
        command: |
          sudo rm -rf /usr/local/go
          curl -O https://storage.googleapis.com/golang/go1.10.1.linux-amd64.tar.gz
          tar xzf go1.10.1.linux-amd64.tar.gz
          sudo mv go/ /usr/local
          go env && go version

    - run:
        name: Build binary.
        command: |
          mkdir -p $GOPATH/src/github.com/${IMAGE}
          git clone https://github.com/${GITHUB_REPO} --depth=1 -b ${VERSION} $GOPATH/src/github.com/${GITHUB_REPO} &>/dev/null
          echo "Building repo: $GITHUB_REPO"
          echo "Version: $VERSION"
          echo "Architecture: $GOARCH"
          cd $GOPATH/src/github.com/${GITHUB_REPO}
          go get .
          until make > /dev/null 2>&1; do sleep 1; printf "."; done

    - run:
        name: Build and push Docker image.
        command: |
          export DIR=`pwd`;
          export VERSION=$(curl -s https://api.github.com/repos/${GITHUB_REPO}/releases/latest | jq -r ".tag_name");
          export IMAGE_ID="${REGISTRY}/${IMAGE}:${VERSION}-${TAG}";
          cd $GOPATH/src/github.com/${GITHUB_REPO};
          curl -sL -o qemu-${QEMU_ARCH}-static.tar.gz https://github.com/multiarch/qemu-user-static/releases/download/${QEMU_VERSION}/qemu-${QEMU_ARCH}-static.tar.gz && tar zx -f qemu-${QEMU_ARCH}-static.tar.gz;
          docker run --rm --privileged multiarch/qemu-user-static:register;
          cp -f $DIR/Dockerfile .;
          docker build -t ${IMAGE_ID} --build-arg target=$TARGET --build-arg arch=$QEMU_ARCH .;
          echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USER --password-stdin;
          docker push ${IMAGE_ID};
          docker tag  "${IMAGE_ID}" "${REGISTRY}/${IMAGE}:latest-${TAG}";
          docker push               "${REGISTRY}/${IMAGE}:latest-${TAG}";


jobs:
  build-amd64:
    <<: *shared
    environment:
      # TODO (Consolidate these)
      GITHUB_REPO: minio/minio
      GOPATH: /home/circleci/go
      GOROOT: /usr/local/go
      IMAGE: minio
      REGISTRY: jessestuart
      GOARCH: amd64
      TAG: amd64
      TARGET: amd64
  build-arm64:
    <<: *shared
    environment:
      GITHUB_REPO: minio/minio
      GOARCH: arm64
      GOPATH: /home/circleci/go
      GOROOT: /usr/local/go
      IMAGE: minio
      QEMU_ARCH: aarch64
      QEMU_VERSION: v2.11.0
      REGISTRY: jessestuart
      TAG: arm64
      TARGET: arm64v8
  build-armhf:
    <<: *shared
    environment:
      GITHUB_REPO: minio/minio
      GOARCH: arm
      GOPATH: /home/circleci/go
      GOROOT: /usr/local/go
      IMAGE: minio
      QEMU_ARCH: arm
      QEMU_VERSION: v2.11.0
      REGISTRY: jessestuart
      TAG: arm
      TARGET: arm32v6
  push-manifest:
    docker:
      - image: docker:18
    environment:
      GITHUB_REPO: minio/minio
      IMAGE: minio
      REGISTRY: jessestuart
    steps:
      - setup_remote_docker

      - run:
          name: Determine repo version. Again.
          command: |
            apk update && apk add curl jq
            curl -s https://api.github.com/repos/${GITHUB_REPO}/releases/latest | jq -r ".tag_name" > ~/VERSION

      - run:
          name: Install manifest-tool.
          command: |
            export VERSION=$(cat ~/VERSION)
            echo "Downloading manifest-tool."
            wget https://github.com/estesp/manifest-tool/releases/download/v0.7.0/manifest-tool-linux-amd64
            mv manifest-tool-linux-amd64 /usr/bin/manifest-tool
            chmod +x /usr/bin/manifest-tool
            manifest-tool --version

      - run:
          name: Push Docker manifest.
          command: |
            export VERSION=$(cat ~/VERSION)
            echo "Pushing manifest "$REGISTRY/$IMAGE":latest"
            echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USER --password-stdin;
            manifest-tool push from-args --platforms linux/arm,linux/arm64 --template "$REGISTRY/$IMAGE:$VERSION-ARCH" --target "$REGISTRY/$IMAGE:latest"
            manifest-tool push from-args --platforms linux/arm,linux/arm64 --template "$REGISTRY/$IMAGE:$VERSION-ARCH" --target "$REGISTRY/$IMAGE:$VERSION"
      - run:
          name: Verify manifest was persisted remotely.
          command: |
            export VERSION=$(cat ~/VERSION)
            manifest-tool inspect "$REGISTRY/$IMAGE:$VERSION"
